# 4 "lexer.mll"
 

  open Lexing
  open Parser
  open Ptree

  (* Erreurs lexicales *)

  exception Lexical_error of string

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s,k) -> Hashtbl.add h s k)
      [ "int", INT; "struct", STRUCT;
	"if", IF; "else", ELSE; "while", WHILE;
	"return", RETURN;
	"sizeof", SIZEOF; ];
    fun s -> try Hashtbl.find h s with Not_found -> IDENT s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum;
        pos_cnum=0 }

  let char_error s = raise (Lexical_error ("illegal character sequence: " ^ s))

  let decode_char s = match String.length s with
    | 1 -> Char.code s.[0]
    | 2 | 4 when s.[0] == '\\' ->
      begin match s.[1] with
        | 'n' -> 10 (* Char.code '\n' *)
        | 't' -> 9  (* Char.code '\t' *)
        | '\'' -> 39 (* Char.code '\'' *)
        | '\"' -> 34 (* Char.code '\"' *)
        | 'x' -> int_of_string ("0x" ^ String.sub s 2 2)
        | _ -> char_error s
      end
    | _ -> char_error s


# 44 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\223\255\224\255\002\000\003\000\030\000\002\000\008\000\
    \031\000\236\255\237\255\031\000\240\255\241\255\242\255\243\255\
    \244\255\245\255\127\000\119\000\129\000\209\000\117\000\002\000\
    \255\255\011\000\253\255\252\255\137\000\160\000\031\001\055\001\
    \019\000\246\255\054\001\092\001\239\255\225\255\233\255\232\255\
    \226\255\229\255\227\255\185\000\252\255\253\255\254\255\047\000\
    \255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\027\000\025\000\024\000\031\000\031\000\
    \021\000\255\255\255\255\017\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\031\000\006\000\005\000\004\000\020\000\001\000\
    \255\255\255\255\255\255\255\255\255\255\007\000\008\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\025\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\045\000\000\000\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\024\000\023\000\000\000\023\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\008\000\023\000\000\000\000\000\000\000\007\000\018\000\
    \015\000\014\000\009\000\010\000\013\000\011\000\038\000\022\000\
    \020\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\033\000\012\000\003\000\005\000\004\000\042\000\
    \041\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\040\000\037\000\036\000\048\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\017\000\006\000\016\000\039\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\000\
    \000\000\255\255\000\000\000\000\025\000\000\000\255\255\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\046\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\027\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\032\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\000\000\000\000\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\000\000\000\000\000\000\034\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\044\000\000\000\000\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\023\000\255\255\000\000\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\025\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\023\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\000\000\000\000\000\000\003\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\005\000\008\000\011\000\047\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\022\000\
    \255\255\018\000\255\255\255\255\022\000\255\255\018\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\043\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\028\000\028\000\028\000\028\000\028\000\028\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \255\255\255\255\255\255\018\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\043\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\028\000\028\000\028\000\028\000\028\000\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\255\255\255\255\255\255\255\255\
    \021\000\255\255\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\255\255\255\255\255\255\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\031\000\255\255\255\255\255\255\255\255\031\000\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\018\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\255\255\031\000\255\255\255\255\
    \255\255\255\255\255\255\031\000\255\255\255\255\255\255\031\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\043\000\255\255\255\255\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 58 "lexer.mll"
      ( newline lexbuf; token lexbuf )
# 245 "lexer.ml"

  | 1 ->
# 60 "lexer.mll"
      ( token lexbuf )
# 250 "lexer.ml"

  | 2 ->
# 62 "lexer.mll"
      ( comment lexbuf; token lexbuf )
# 255 "lexer.ml"

  | 3 ->
# 64 "lexer.mll"
      ( newline lexbuf; token lexbuf )
# 260 "lexer.ml"

  | 4 ->
let
# 65 "lexer.mll"
             s
# 266 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 66 "lexer.mll"
      ( id_or_keyword s )
# 270 "lexer.ml"

  | 5 ->
# 68 "lexer.mll"
      ( INTEGER 0l )
# 275 "lexer.ml"

  | 6 ->
let
# 69 "lexer.mll"
                          s
# 281 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
      ( try
	  INTEGER (Int32.of_string s)
	with _ ->
	  raise (Lexical_error ("invalid integer constant '" ^ s ^ "'")) )
# 288 "lexer.ml"

  | 7 ->
let
# 74 "lexer.mll"
                   s
# 294 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 75 "lexer.mll"
      ( try
	  INTEGER (Int32.of_string ("0o" ^ s))
	with _ ->
	  raise (Lexical_error ("invalid octal constant '" ^ s ^ "'")) )
# 301 "lexer.ml"

  | 8 ->
let
# 79 "lexer.mll"
                    s
# 307 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 80 "lexer.mll"
      ( try
	  INTEGER (Int32.of_string s)
	with _ ->
	  raise (Lexical_error ("invalid hexadecimal constant '" ^ s ^ "'")) )
# 314 "lexer.ml"

  | 9 ->
let
# 84 "lexer.mll"
                  s
# 320 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 85 "lexer.mll"
      ( INTEGER (Int32.of_int (decode_char s)) )
# 324 "lexer.ml"

  | 10 ->
# 87 "lexer.mll"
      ( LBRACE )
# 329 "lexer.ml"

  | 11 ->
# 89 "lexer.mll"
      ( RBRACE )
# 334 "lexer.ml"

  | 12 ->
# 91 "lexer.mll"
      ( LPAR )
# 339 "lexer.ml"

  | 13 ->
# 93 "lexer.mll"
      ( RPAR )
# 344 "lexer.ml"

  | 14 ->
# 95 "lexer.mll"
      ( COMMA )
# 349 "lexer.ml"

  | 15 ->
# 97 "lexer.mll"
      ( SEMICOLON )
# 354 "lexer.ml"

  | 16 ->
# 99 "lexer.mll"
      ( ARROW )
# 359 "lexer.ml"

  | 17 ->
# 101 "lexer.mll"
      ( MINUS )
# 364 "lexer.ml"

  | 18 ->
# 103 "lexer.mll"
      ( PLUS )
# 369 "lexer.ml"

  | 19 ->
# 105 "lexer.mll"
      ( STAR )
# 374 "lexer.ml"

  | 20 ->
# 107 "lexer.mll"
      ( SLASH )
# 379 "lexer.ml"

  | 21 ->
# 109 "lexer.mll"
      ( BANG )
# 384 "lexer.ml"

  | 22 ->
# 111 "lexer.mll"
      ( AMPERSANDAMPERSAND )
# 389 "lexer.ml"

  | 23 ->
# 113 "lexer.mll"
      ( VERTICALBARVERTICALBAR )
# 394 "lexer.ml"

  | 24 ->
# 115 "lexer.mll"
      ( EQ )
# 399 "lexer.ml"

  | 25 ->
# 117 "lexer.mll"
      ( COMP Bgt )
# 404 "lexer.ml"

  | 26 ->
# 119 "lexer.mll"
      ( COMP Bge )
# 409 "lexer.ml"

  | 27 ->
# 121 "lexer.mll"
      ( COMP Blt )
# 414 "lexer.ml"

  | 28 ->
# 123 "lexer.mll"
      ( COMP Ble )
# 419 "lexer.ml"

  | 29 ->
# 125 "lexer.mll"
      ( EQOP Beq )
# 424 "lexer.ml"

  | 30 ->
# 127 "lexer.mll"
      ( EQOP Bneq )
# 429 "lexer.ml"

  | 31 ->
# 129 "lexer.mll"
      ( raise (Lexical_error ("illegal character: " ^ lexeme lexbuf)) )
# 434 "lexer.ml"

  | 32 ->
# 131 "lexer.mll"
      ( EOF )
# 439 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 43
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 134 "lexer.mll"
         ( () )
# 451 "lexer.ml"

  | 1 ->
# 135 "lexer.mll"
         ( newline lexbuf; comment lexbuf )
# 456 "lexer.ml"

  | 2 ->
# 136 "lexer.mll"
         ( comment lexbuf )
# 461 "lexer.ml"

  | 3 ->
# 137 "lexer.mll"
         ( raise (Lexical_error "unterminated comment") )
# 466 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

